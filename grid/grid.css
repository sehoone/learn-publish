/* =================================
   CSS Grid 학습용 스타일시트
   ================================= */

body {
    font-family: 'Anton', Arial, sans-serif;
    background: linear-gradient(135deg, #f4f6fa 0%, #e8f1ff 100%);
    margin: 0;
    padding: 20px;
    line-height: 1.6;
}

main {
    max-width: 1000px;
    margin: 0 auto;
    background: #fff;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    padding: 40px;
}

/* =================================
   텍스트 스타일링
   ================================= */
h1 {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 20px;
    font-size: 2.5em;
    background: linear-gradient(45deg, #3498db, #9b59b6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.intro {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    border-left: 5px solid #3498db;
    margin-bottom: 30px;
}

.intro p {
    margin: 10px 0;
    color: #34495e;
}

.grid-demo h2 {
    margin-top: 40px;
    margin-bottom: 15px;
    font-size: 1.4em;
    color: #2c3e50;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
}

/* 설명 박스 스타일 */
.explanation {
    background: #e8f4f8;
    border: 1px solid #b8d4da;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.explanation p {
    margin: 8px 0;
    color: #2c3e50;
}

.explanation code {
    background: #2c3e50;
    color: #ecf0f1;
    padding: 3px 8px;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
}

/* 요약 섹션 */
.summary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 15px;
    margin-top: 40px;
}

.summary h2, .summary h3 {
    color: white;
    border-bottom: 2px solid rgba(255,255,255,0.3);
}

.summary ul {
    list-style-type: none;
    padding-left: 0;
}

.summary li {
    background: rgba(255,255,255,0.1);
    margin: 10px 0;
    padding: 10px 15px;
    border-radius: 8px;
    border-left: 4px solid #f1c40f;
}

/* =================================
   그리드 컨테이너 기본 스타일
   ================================= */

.grid-container {
    display: grid;
    background: linear-gradient(135deg, #e0e7ef 0%, #d1dae3 100%);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 25px;
    gap: 15px;
    min-height: 150px;
    border: 2px solid #b8c6db;
    position: relative;
}

.grid-item {
    background: linear-gradient(135deg, #4f8cff 0%, #3b6bdb 100%);
    color: #fff;
    padding: 20px;
    border-radius: 8px;
    font-weight: bold;
    text-align: center;
    min-width: 50px;
    font-size: 1.1em;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 15px rgba(79, 140, 255, 0.3);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.grid-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(79, 140, 255, 0.4);
}

/* =================================
   1. 기본 Grid (3열 레이아웃)
   ================================= */
.grid-container.basic {
    /* 
    💡 핵심 개념: repeat() 함수 사용
    - repeat(3, 1fr): 3개의 열을 만들고 각각 1fr씩 할당
    - 1fr = 사용 가능한 공간의 1/3씩 균등 분배
    - 동일한 효과: grid-template-columns: 1fr 1fr 1fr;
    */
    grid-template-columns: repeat(3, 1fr);
}

/* =================================
   2. Grid Rows (행 높이 제어)
   ================================= */
.grid-container.rows {
    /*
    💡 핵심 개념: 명시적 행 크기 지정
    - grid-template-rows: 각 행의 높이를 직접 지정
    - 60px 60px 60px: 첫 번째, 두 번째, 세 번째 행 모두 60px
    - auto, min-content, max-content 등 다양한 값 사용 가능
    */
    grid-template-rows: 60px 60px 60px;
    grid-template-columns: repeat(3, 1fr);
}

/* =================================
   3. Grid Gap (간격 조절)
   ================================= */
.grid-container.gap {
    /*
    💡 핵심 개념: 그리드 아이템 간격 제어
    - gap: 행과 열의 간격을 동시에 설정
    - row-gap, column-gap으로 개별 설정 가능
    - gap: 10px 20px; (행 간격 10px, 열 간격 20px)
    */
    grid-template-columns: repeat(4, 1fr);
    gap: 24px;
}

/* =================================
   4. Grid Area (영역 기반 레이아웃)
   ================================= */
.grid-container.area {
    /*
    💡 핵심 개념: 시각적 레이아웃 정의
    - grid-template-areas: 문자열로 레이아웃 구조를 그림
    - 각 문자열은 하나의 행을 나타냄
    - 동일한 이름은 해당 영역이 합쳐짐을 의미
    - "."은 빈 공간을 나타냄
    */
    grid-template-areas:
        "header header header"    /* 첫 번째 행: header가 3칸 차지 */
        "sidebar main main"       /* 두 번째 행: sidebar 1칸, main 2칸 */
        "footer footer footer";   /* 세 번째 행: footer가 3칸 차지 */
    grid-template-columns: 1fr 2fr 2fr;  /* 열 비율: 1:2:2 */
    grid-template-rows: 50px 100px 50px; /* 행 높이: 50px, 100px, 50px */
}

/* Grid Area 아이템들 */
.item-header {
    grid-area: header;  /* header 영역에 배치 */
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
}

.item-sidebar {
    grid-area: sidebar; /* sidebar 영역에 배치 */
    background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
}

.item-main {
    grid-area: main;    /* main 영역에 배치 */
    background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
}

.item-footer {
    grid-area: footer;  /* footer 영역에 배치 */
    background: linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%);
}

/* =================================
   5. Grid 라인 기반 배치
   ================================= */
.grid-container.line-based {
    /*
    💡 핵심 개념: 그리드 라인으로 정확한 위치 지정
    - 그리드 라인은 1부터 시작 (0이 아님!)
    - 3열 그리드는 4개의 세로 라인이 있음 (1, 2, 3, 4)
    - 음수 사용 가능: -1은 마지막 라인
    */
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 80px);
}

.spanning-item {
    /*
    💡 핵심 개념: 여러 셀에 걸쳐 배치
    - grid-column: 1 / 3; (1번 라인부터 3번 라인까지, 즉 2칸 차지)
    - grid-row: 1 / 2; (1번 라인부터 2번 라인까지, 즉 1행 차지)
    - span 키워드 사용 가능: grid-column: span 2;
    */
    grid-column: 1 / 3;  /* 첫 번째와 두 번째 열 차지 */
    grid-row: 1 / 2;     /* 첫 번째 행 차지 */
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
}

/* =================================
   6. 자동 배치 (Auto-fit)
   ================================= */
.grid-container.auto-fit {
    /*
    💡 핵심 개념: 반응형 그리드
    - auto-fit: 빈 공간을 기존 아이템들이 늘어나서 채움
    - auto-fill: 빈 공간에 빈 열을 유지
    - minmax(200px, 1fr): 최소 200px, 최대 1fr
    - 화면 크기에 따라 열 개수가 자동 조정됨
    */
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
}

/* =================================
   7. 정렬 속성
   ================================= */
.grid-container.alignment {
    /*
    💡 핵심 개념: 그리드 아이템 정렬
    - justify-items: 수평 정렬 (start, end, center, stretch)
    - align-items: 수직 정렬 (start, end, center, stretch)
    - place-items: justify-items와 align-items를 한번에 설정
    */
    grid-template-columns: repeat(2, 200px);
    grid-template-rows: repeat(2, 100px);
    justify-items: center;    /* 수평 중앙 정렬 */
    align-items: center;      /* 수직 중앙 정렬 */
    /* place-items: center; 와 동일한 효과 */
}

/* =================================
   추가 스타일링
   ================================= */

/* 그리드 라인 시각화를 위한 가상 요소 */
.grid-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: -1;
}

/* 호버 효과 개선 */
.grid-item:nth-child(odd) {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.grid-item:nth-child(even) {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
}

/* 반응형 디자인 */
@media (max-width: 768px) {
    main {
        padding: 20px;
        margin: 10px;
    }
    
    .grid-container.basic,
    .grid-container.rows {
        grid-template-columns: repeat(2, 1fr); /* 모바일에서는 2열로 */
    }
    
    .grid-container.gap {
        grid-template-columns: repeat(2, 1fr); /* 모바일에서는 2열로 */
    }
    
    .grid-container.area {
        grid-template-areas:
            "header header"
            "sidebar sidebar" 
            "main main"
            "footer footer";
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto auto auto;
    }
}